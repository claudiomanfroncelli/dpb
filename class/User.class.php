<?php	class USER	{		public function register($uname, $email, $upass, $code)		{			require_once 'Database.class.php'; //richiedo il db			$dbh = new Database();			try {				//		$password = md5($upass);				$password = password_hash($upass, PASSWORD_DEFAULT);				$stmt = $dbh->query("INSERT INTO utenti(nome_cognome_utente,email_utente,password_utente,token_utente) 	                                       VALUES(:user_name, :user_mail, :user_pass, :active_code)");				$stmt->bindparam(":user_name", $uname);				$stmt->bindparam(":user_mail", $email);				$stmt->bindparam(":user_pass", $password);				$stmt->bindparam(":active_code", $code);				$dbh->execute();				return $stmt;			}			catch (PDOException $ex) {				echo $ex->getMessage();			}		}		//----------------------------------------------------------------------------		public function login($email, $upass)		{			//azzero le SESSION di errore			$_SESSION['errorEsistente'] = "";			$_SESSION['errorAttivo'] = "";			$_SESSION['errorAutorizzato'] = "";			$_SESSION['errorPwdScaduta'] = "";			$_SESSION['errorCoppiaUserPwd'] = "";			//richiedo il db			require_once 'Database.class.php';			//apro un'istanza			$dbh = new Database();			$today = date("Y-m-d");			try {				$dbh->query("SELECT * FROM utenti WHERE email_utente='$email'");				$dbh->execute();				$userRows = $dbh->resultset();				if (count($userRows) == 1) { //user esiste					foreach ($userRows as $userRow) {						if ($userRow['attivo_utente'] == 'Y') {// user è attivo							if ($userRow['autorizzato_utente'] == 'Y') {// user è autorizzato								if ($userRow['data_scadenza_password_utente'] > $today) {//password non scaduta									if (password_verify($upass, $userRow['password_utente'])) {//coppia user/password riconosciuta										foreach ($userRows as $userRow => $valore) {// se autenticazione ok,											$_SESSION = $valore;//carico i valori del record utente										}//nelle $_SESSION. la sessione aperta è indicata da $_SESSION['id_utente'].										return true;									} else {										$_SESSION['errorCoppiaUserPwd'] = 'Y';										header("Location: index.php");										exit;									}								} else {									$_SESSION['errorPwdScaduta'] = 'Y';									header("Location: index.php");									exit;								}							} else {								$_SESSION['errorAutorizzato'] = 'Y';								header("Location: index.php");								exit;							}						} else {							$_SESSION['errorAttivo'] = 'Y';							header("Location: index.php");							exit;						}					}				} else {					$_SESSION['errorEsistente'] = 'Y';					header("Location: index.php");					exit;				}			}			catch			(PDOException $ex) {				echo $ex->getMessage();			}		}//----------------------------------------------------------------------------		public		function logout()		{			session_destroy();			$_SESSION = array();		}//----------------------------------------------------------------------------		function send_mail($email, $message, $subject)		{			require_once('mailer/class.phpmailer.php');			$mail = new PHPMailer();			$mail->IsSMTP();			$mail->SMTPDebug = 0;			$mail->SMTPAuth = true;			$mail->SMTPSecure = "ssl";			$mail->Host = "smtps.aruba.it";			$mail->Port = 465;			$mail->AddAddress($email);			$mail->Username = "provamail@dpbroker.it";			$mail->Password = "cl4ud100";			$mail->SetFrom('provamail@dpbroker.it', 'DP Broker');			$mail->AddReplyTo("provamail@dpbroker.it", "DP Broker");			$mail->Subject = $subject;			$mail->MsgHTML($message);			$mail->Send();		}//----------------------------------------------------------------------------		function showFormErrors($formErrors) //questa funzione stampa un elenco puntato degli errori		{			return '<ul><li>'.implode('</li><li>', $formErrors).'</li></ul>';		}//----------------------------------------------------------------------------		function emailIsValid($email)// Questa funzione si occupa di controllare se un indirizzo email è stato scritto correttamente		{			if (false == preg_match('/^[a-zA-Z0-9_.-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$/', $email)) {				return false;			} else {				return true;			}		}//----------------------------------------------------------------------------		function tokenIsValid($token) // Questa funzione si occupa di controllare se un token è scritto correttamente		{			// Un token deve essere composto solamente da numeri e lettere			// ed avere una lunghezza di 32 caratteri			if (false == preg_match('/^([a-z0-9]){32}$/', $token)) {				return false;			} else {				return true;			}		}//----------------------------------------------------------------------------		function redirect($url)		{			header("Location: $url");		}	}